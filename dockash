#!/bin/bash

set -e

# This script ################################################################################

self=$(realpath --no-symlinks $0)
script_name=$(basename $self)

if [ -L $self ]; then
    repo_type=local
    build_cwd=$(dirname $(realpath $(readlink -f $self)))
    repo=.
    source_location=$build_cwd
else
    repo_type=remote
    build_cwd=.
    repo=https://github.com/dan-elias/dockash
    source_location=$repo
fi

APP_description=$(cat <<- EOF
APP is the name of the app to run, corresponding to a subfolder within:
$source_location/src
EOF
)

# Helpers ################################################################################

function get_image_name { # app_name
    app_name=$1
    echo dockash_${USER}_${app_name}:latest
}

declare -A usage

function show_usage_and_exit { # [exit code]
    echo USAGE: "${usage["$operation"]}"
    exit ${1:-0}
}


# Command functions  ##########################################################################################
# 
# Functions which run a command and terminate the script
# 


# all-apps ########################################


usage["all-apps"]=$(cat <<- EOF
$script_name all-apps

List all available apps

Example:
    $script_name all-apps
EOF
)


function all-apps {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage_and_exit 0
                ;;
            *)
                show_usage_and_exit 1
                ;;
        esac
        shift
    done
    if [ "$repo_type" == "local" ]; then
        ls "${build_cwd}/src"
    else
        $self install unzip
        tempdir=$(mktemp --directory)
        pushd $tempdir
        $self get-url -O repo.zip ${repo}/archive/refs/heads/master.zip
        unzip repo.zip
        ls dockash-master/src
        popd
        rm -r $tempdir
    fi
    exit 0
}

# get-url ########################################

usage["get-url"]=$(cat <<- EOF
$script_name get-url [OPTIONS] URL

Download a file using wget (if wget isn't installed, it is used via a docker container)

Options:

    -o, --outfile   Output file

    --chmod-ref     Copy permissions from this file

    Other options for wget (eg: --no-check-certificate)

Example:
    $script_name get-url https://raw.githubusercontent.com/dan-elias/dockash/master/README.rst
EOF
)

containerized_wget_Dockerfile_content=$(cat <<- EOF
FROM ubuntu:latest

RUN apt-get --allow-releaseinfo-change update \
    && apt-get  install --yes --no-install-recommends \
        wget \
        ca-certificates \
    && apt-get purge  &&  apt-get clean  &&  rm -rf /var/lib/apt/lists/*

ENV SHELL /bin/bash
EOF
)

function containerized-wget {
   image_name=$(get_image_name 'containerized-wget')
   if [[ "$(docker images -q ${image_name} 2> /dev/null)" == "" ]]; then
       echo "${containerized_wget_Dockerfile_content}" | docker build --tag ${image_name} -
   fi
  
   docker run \
       --rm \
       -i -t  --env LINES=`tput lines` --env COLUMNS=`tput cols` \
       --env HOME \
       --env USER \
       --env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
       --user $(id -u ${USER}):$(id -g ${USER}) \
       --volume $(pwd):/work \
       --workdir="/work" \
       ${image_name} \
       wget "$@"
}


function get-url {
    outfile=""
    options=()
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage_and_exit 0
                ;;
            -o|--outfile)
                if [ -z "$2" ]; then show_usage_and_exit 0; fi
                outfile=$2
                shift
                ;;
            --chmod-ref)
                if [ -z "$2" ]; then show_usage_and_exit 0; fi
                chmod_ref=$2
                shift
                ;;
            -*|--*)
                options+=( $1 )
                ;;
            *)
                url=$1
                if [ -n "$2" ]; then
                    show_usage_and_exit 1
                fi
                tempfile=$(mktemp)
                if [ -n "$(which wget)" ]; then
                    wget -O $tempfile "${options[@]}" $url
                else
                    pushd `dirname $tempfile`
                    containerized-wget -O `basename $tempfile` "${options[@]}" $url
                    popd
                fi
                if [ -z "$outfile" ]; then
                    cat $tempfile
                    rm $tempfile
                else
                    if [ -n "${chmod_ref}" ]; then
                        chmod --reference "${chmod_ref}" $tempfile
                    fi
                    mv $tempfile "$outfile"
                fi
                exit 0
                ;;
        esac
        shift
    done
    show_usage_and_exit 1
}

# install ########################################

usage["install"]=$(cat <<- EOF
$script_name install [OPTIONS] APPS

Install one or more apps

$APP_description   

Options:

    -f, --force     Install the app even if it is already
    -v, --verbose   Verbose output

Example:
    $script_name install git
EOF
)

function install {
    force=false
    verbose=false
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage_and_exit 0
                ;;
            -f|--force)
                force=true
                ;;
            -v|--verbose)
                verbose=true
                ;;
            -*|--*)
                show_usage_and_exit 1
                exit 1
                ;;
            *)
                while [[ $# -gt 0 ]]; do
                    app_name=$1
                    shift
                    app_location=$(which $app_name)
                    install_required='Y'
                    if [ -n "$app_location" ]; then
                        if $force; then
                            if $verbose; then echo "Ignoring existing installation of ${app_name} found at: ${app_location}"; fi
                        else
                            if $verbose; then echo "Found ${app_name}: ${app_location}"; fi
                            install_required='N'
                        fi
                    fi
                    if [ "$install_required" == "Y" ]; then
                        source_url_or_path=${source_location}/src/${app_name}/run
                        dest=$(dirname $self)/${app_name}
                        if [ "${repo_type}" == "local" ]; then
                            ln -s $source_url_or_path $dest
                            chmod --reference $self $dest
                        else
                            $self get-url --chmod-ref $self --outfile $dest $source_url_or_path
                        fi
                        if $verbose; then echo "Installed: ${dest} from: ${source_location}"; fi
                    fi
                done
                if [ -z "$app_name" ]; then
                    show_usage_and_exit 1
                fi
                exit 0
                ;;
        esac
        shift
    done
    show_usage_and_exit 1
}


# image-name ########################################

usage["image-name"]=$(cat <<- EOF
$script_name image-name APP

Return the name of an image used for an app

$APP_description   

Example:
    $script_name image-name git
EOF
)

function image-name {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage_and_exit 0
                ;;
            -*|--*)
                show_usage_and_exit 1
                exit 1
                ;;
            *)
                app_name=$1
                if [ -n "$2" ]; then
                    show_usage_and_exit 1
                fi
                image_name=$(get_image_name $app_name)
                echo $image_name
                exit 0
                ;;
        esac
        shift
    done
    show_usage_and_exit 1
}



# check-image ########################################

usage["check-image"]=$(cat <<- EOF
$script_name check-image [OPTIONS] APPS

Ensure that one or more dockash apps is available to the current user, but
don't run them.

$APP_description   

Options:

    -v, --verbose   Verbose output

Example:
    $script_name check-image git
EOF
)

function check-image {
    verbose=false
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage_and_exit 0
                ;;
            -v|--verbose)
                verbose=true
                ;;
            -*|--*)
                show_usage_and_exit 1
                exit 1
                ;;
            *)
                while [[ $# -gt 0 ]]; do
                    app_name=$1
                    shift
                    image_name=$(get_image_name $app_name)
                    if [[ -n "$(docker images -q ${image_name} 2> /dev/null)" ]]; then
                        if $verbose; then echo "Found image: ${image_name}"; fi
                    else
                        if $verbose; then echo "Building image: ${image_name}"; fi
                        subdir=src/${app_name}/binder
                        dockerfile_url=${repo}/${subdir}/Dockerfile
                        pushd $build_cwd
                        if [ "$app_name" == "jupyter-repo2docker" ]; then
                            if [[ $repo_type == local ]]; then
                                dockerfile_content=$(cat "${dockerfile_url}")
                            else
                                tmp=$(mktemp)
                                $self get-url -O $tmp $dockerfile_url
                                dockerfile_content=$(cat $tmp)
                                rm $tmp
                            fi
                            echo "$dockerfile_content" | docker build --tag ${image_name} - 
                        else
                            $self install jupyter-repo2docker
                            jupyter-repo2docker  \
                                --image-name ${image_name} \
                                --subdir ${subdir} \
                                ${repo} \
                                echo
                        fi
                        popd
                    fi
                done
                if [ -z "$app_name" ]; then
                    show_usage_and_exit 1
                fi
                exit 0
                ;;
        esac
        shift
    done
    show_usage_and_exit 1
}


# run ########################################

usage["run"]=$(cat <<- EOF
$script_name run [OPTIONS] APP [APP PARAMS]

Run a dockash app (installing it, if necessary)

Options:
    -d, --detach    Run in detached mode instead of interactively using the
                    terminal.
        --pwd-work  Mount the host working directory as /work within the
                    container, and set this to the container working directory
        --as-me     Use the current user's identity and group memberships
                    within the container
        --no-rm     Do not delete the container after it's finished (the
                    default - different to docker's default)

In addition to the options above, the following options are passed through
unchanged to docker run (see: https://docs.docker.com/engine/reference/run/):

        --device
        --entrypoint
    -e, --env
        --expose
        --mount
        --network
        --privileged
    -u, --user
    -v, --volume
    -w, --workdir

$APP_description   

APP PARAMS are passed through to the app running in the container.

Example:
    $script_name run git --help
EOF
)

function run {
    run_args=()
    container_rm=true
    detach=false
    entrypoint=""
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage_and_exit 0
                ;;
            --no-rm)
                container_rm=false
                ;;
            -d|--detach)
                detach=true
                ;;
            --pwd-work)
                run_args+=( --volume $(pwd):/work --workdir="/work" )
                ;;
            --as-me)
                run_args+=( --env HOME --env USER --user $(id -u ${USER}):$(id -g ${USER}) )
                IFS=', ' read -r -a grps <<< "$(id -G $USER)"
                run_args+=( ${grps[*]/#/--group-add } )
                ;;
            --device|-e|--env|--expose|--mount|--network|-u|--user|-v|--volume|-w|--workdir)
                run_args+=( $1 $2 )
                shift
                ;;
            --entrypoint)
                entrypoint=$2
                shift
                ;;
            --command)
                command=$2
                shift
                ;;
            --privileged)
                run_args+=( $1 )
                ;;
            --mount-docker-socket)
                run_args+=( --volume '/var/run/docker.sock:/var/run/docker.sock' )
                ;;
            -*|--*)
                echo unknown option: $1
                show_usage_and_exit 1
                exit 1
                ;;
            *)
                app_name=$1
                shift
                if [ -z "${command}" ]; then
                    command=${app_name#containerized-}
                fi
                run_args+=( --entrypoint "${entrypoint}" )
                if $rm_container ; then
                    run_args+=( --rm )
                fi
                if $detach ; then
                    run_args+=( --detach )
                else
                    run_args+=( -i -t  --env LINES=`tput lines` --env COLUMNS=`tput cols` --env TERM )
                fi
                $self check-image $app_name
                docker run "${run_args[@]}" `get_image_name $app_name` ${command} "$@"
                exit 0
                ;;
        esac
        shift
    done
    show_usage_and_exit 1
}


# main  ##########################################################################################

usage["-"]=$(cat <<- EOF
$script_name OPERATION [OPTIONS] ...

Helper script for installing and running dockash apps

Operations:
    run         Run a dockash app (installing it, if necessary)

    all-apps    List all available dockash apps

    install     Install an app

    check-image Ensure that a dockash image is available to the current user

    get-url     Download a file (without requiring download utilities like curl
                or wget)

    image-name  Get the image name for an app

For usage details on a specific operation, use the "-h" or "--help" options

Note:  The app source code is in a $repo_type repository located at: $source_location.

This script will use app source code from a local repository if it is run via a
symbolic link pointing to the copy of this script in the root folder of the
repository.  If it is not run via a symbolic link, it will use source directly
from github.

Example:
    $script_name run --help
EOF
)

case $1 in
    all-apps|install|check-image|get-url|image-name|run)
        operation=$1
        shift
        $operation "$@"
        ;;
    -h|--help)
        operation="-"
        show_usage_and_exit 0
        ;;
    *)
        operation="-"
        show_usage_and_exit 1
        ;;
esac




